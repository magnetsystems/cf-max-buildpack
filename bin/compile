#!/bin/bash
#
# Install java (for now we assume it has been installed), unzip
# the single zip file and configure the deployment variables.
#
# Usage: compile build-dir cacha-dir env-dir

# Install a build pack
install_buildpack() {
  BUILDPACK=$1
  BUILD_DIR=$2
  CACHE_DIR=$3
  ENV_DIR=$4

  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [[ "$branch" == "$url" ]]; then
    branch=""
  fi

  if [[ ! -z "$url" ]]; then
    echo "=== Download buildpack: $url to $dir"
    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [[ -f "$dir/.gitmodules" ]]; then
        echo "=== Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [[ ! -z "$branch" ]]; then
      git checkout $branch >/dev/null 2>&1
    fi

    chmod -f +x $dir/bin/{detect,compile,release} || true

    # Run the detect, compile and release.
    framework=$($dir/bin/detect $BUILD_DIR)
    if [[ $? -eq 0 ]]; then
      echo "=== Detected Framework: $framework"
    else
      echo "@@@ Detection failed: ignoring result"
    fi

    $dir/bin/compile $BUILD_DIR $CACHE_DIR $ENV_DIR
    if [[ $? -ne 0 ]]; then
      echo "@@@ $BUILDPACK: compile failed"
      exit 1
    fi

    if [[ -e $dir/export ]]; then
      source $dir/export
    fi

    if [[ -x $dir/bin/release ]]; then
      $dir/bin/release $BUILD_DIR > $BUILD_DIR/last-pack_release.out
    fi
  fi

  if [[ -e $BUILD_DIR/last_packrelease.out ]]; then
    echo "=== Using release configuration from last framework ($framework)."
    cat $BUILD_DIR/last_pack_release.out
  fi
}

# Common functions from heroku-buildpack-java/lib/common.sh
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS|JAVA_TOOL_OPTIONS)$'}
  if [[ -d "$env_dir" ]]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

cache_copy() {
  rel_dir=$1
  from_dir=$2
  to_dir=$3
  rm -rf $to_dir/$rel_dir
  if [ -d $from_dir/$rel_dir ]; then
    mkdir -p $to_dir/$rel_dir
    cp -pr $from_dir/$rel_dir/. $to_dir/$rel_dir
  fi
}

# Install java from heroku-buildpack-java (currently we disable mvn)
install_java() {
  BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
#  . $BP_DIR/lib/common.sh
#  . $BP_DIR/lib/maven.sh

  # parse args
  BUILD_DIR=$1
  CACHE_DIR=$2
  ENV_DIR=$3

  export_env_dir $ENV_DIR

  JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
  mkdir -p /tmp/jvm-common
  curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
  . /tmp/jvm-common/bin/util
  . /tmp/jvm-common/bin/java
  . /tmp/jvm-common/opt/jdbc.sh
  install_java_with_overlay ${BUILD_DIR}

  #create the cache dir if it doesn't exist
  mkdir -p $CACHE_DIR
}

#
# Main starts here
#

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
echo "=== max-server/bin/compile: $BUILD_DIR $CACHE_DIR $ENV_DIR"
cd $BUILD_DIR

# buildpack automatically appends .zip suffix
echo "=== Unzip max-server.zip"
unzip max-server

# Install the java-buildpack
#( install_buildpack https://github.com/cloudfoundry/java-buildpack.git $BUILD_DIR $CACHE_DIR $ENV_DIR )

# Install java
install_java $BUILD_DIR $CACHE_DIR $ENV_DIR

if [[ -z "`which java`" ]]; then
#  if [[ -z "$JAVA_HOME" ]]; then
#    export JAVA_HOME=/home/vcap/app/.java-buildpack/open_jdk_jre
#    export PATH=$JAVA_HOME/bin:/usr/java:$PATH
#  fi
  echo "@@@ No java is found"
else
  echo "=== Found java at `which java`"
fi

# This step will not be needed if the customization is done before the cf push.
# It requires java, so it may be problematic if java runtime is not available.
#echo "=== Set deployment environment"
#max-server/bin/replace-env.sh max-server/server/conf/default deploy_env/default.props deploy_env/cf.props
